plugins {
    id "com.diffplug.spotless"
    id "com.github.ben-manes.versions"
    id "io.freefair.lombok"
    id "io.spring.dependency-management"
    id "io.spring.nohttp"
    id "jacoco"
    id "java"
    // id "org.graalvm.buildtools.native"
    id "org.openjfx.javafxplugin"
    id "org.sonarqube"
    id "org.springframework.boot"
}


group = "io.github.bbortt"
version = "${version}"


java {
    sourceCompatibility = "${javaVersion}"
}
assert System.properties["java.specification.version"] == "21"


wrapper {
    gradleVersion = "8.7"
}


repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
}


ext {
    springShellVersion = "${springShellVersion}"
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.shell:spring-shell-dependencies:${springShellVersion}"
    }
}


dependencies {
    annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen:${jpamodelgenVersion}"

    implementation "jakarta.transaction:jakarta.transaction-api:${transactionApiVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    developmentOnly "org.springframework.boot:spring-boot-devtools"

    runtimeOnly "com.h2database:h2"

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
}


def profiles = ""
if (project.hasProperty("prod")) {
    profiles += "prod"
} else {
    profiles += "dev"
}


processResources {
    inputs.property("version", version)
    inputs.property("springProfiles", profiles)
    filesMatching("**/application.yml") {
        filter {
            it.replace("#spring.profiles.active#", profiles)
        }
    }
}


javafx {
    version = "21"
    modules = [ "javafx.controls", "javafx.fxml" ]
}


bootRun {
    args = ["--spring.profiles.active=${profiles}"]
}


nohttp {
    source.include "build.gradle", "README.md"
}


checkstyle {
    toolVersion "${checkstyleVersion}"
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
}


spotless {
    java {
        target "src/*/java/**/*.java"
        removeUnusedImports()
    }
}


test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events "FAILED", "SKIPPED"
    }
    jvmArgs += "-Djava.security.egd=file:/dev/./urandom -Xmx512m"
    // ignoreFailures true
    reports.html.required = false
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTest(type: Test) {
    maxHeapSize = "1G"
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"
    testLogging {
        events "FAILED", "SKIPPED"
    }
    systemProperty("java.security.egd", "file:/dev/./urandom")
    // ignoreFailures true
    reports.html.required = false
}
integrationTest.dependsOn test

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

check.dependsOn integrationTest

apply from: "gradle/sonar.gradle"
